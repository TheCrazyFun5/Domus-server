{"version":3,"file":"guard.js","sourceRoot":"","sources":["../../../../src/app/router/guard/guard.ts"],"names":[],"mappings":"AACA,OAAO,QAAQ,MAAM,+BAA+B,CAAC;AACrD,OAAO,MAAM,MAAM,iCAAiC,CAAC;AAErD,OAAO,YAAY,MAAM,+BAA+B,CAAC;AAEzD,MAAM,KAAK;IACT,KAAK,CAAC,aAAa,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;QACjE,IAAI,CAAC;YACH,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC;YAC/B,IAAI,CAAC,KAAK,IAAI,OAAO,KAAK,IAAI,QAAQ;gBAAE,MAAM,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;YAClF,MAAM,OAAO,GAAe,MAAM,YAAY,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;YACvE,IAAI,OAAO,EAAE,CAAC;gBACZ,GAAG,CAAC,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;gBAClC,GAAG,CAAC,OAAO,CAAC,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;YAC3C,CAAC;YACD,IAAI,EAAE,CAAC;QACT,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,GAAG,YAAY,QAAQ;gBACrB,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;gBAC1C,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;YACjE,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC5B,CAAC;IACH,CAAC;CACF;AAED,eAAe,IAAI,KAAK,EAAE,CAAC","sourcesContent":["import { NextFunction, Request, Response } from \"express\";\r\nimport errorApi from \"../../service/errorService.js\";\r\nimport logger from \"../../../module/logger/index.js\";\r\nimport { JWTPayload } from \"./../../../model/jwtModel.js\";\r\nimport tokenService from \"../../service/tokenService.js\";\r\n\r\nclass guard {\r\n  async jwtMiddleware(req: Request, res: Response, next: NextFunction): Promise<void | Response> {\r\n    try {\r\n      const token = req.headers.auth;\r\n      if (!token || typeof token != \"string\") throw errorApi.unauthorized(\"Нет токена\");\r\n      const Payload: JWTPayload = await tokenService.validaccessToken(token);\r\n      if (Payload) {\r\n        req.headers.login = Payload.login;\r\n        req.headers.userId = `${Payload.userId}`;\r\n      }\r\n      next();\r\n    } catch (err) {\r\n      err instanceof errorApi\r\n        ? res.status(err.status).json(err.message)\r\n        : res.status(500).json(\"Мой код решил, что сегодня выходной.\");\r\n      logger.express.error(err);\r\n    }\r\n  }\r\n}\r\n\r\nexport default new guard();\r\n"]}