{"version":3,"file":"tokenService.js","sourceRoot":"","sources":["../../../src/app/service/tokenService.ts"],"names":[],"mappings":"AAAA,OAAO,GAAG,MAAM,cAAc,CAAC;AAC/B,OAAO,YAAY,MAAM,oCAAoC,CAAC;AAC9D,OAAO,QAAQ,MAAM,mBAAmB,CAAC;AAGzC,MAAM,YAAY;IAChB,KAAK,CAAC,YAAY,CAAC,MAAc,EAAE,KAAa;QAC9C,MAAM,WAAW,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,YAAY,CAAC,IAAI,CAAC,MAAO,CAAC,GAAG,CAAC,eAAe,EAAE;YAC5G,SAAS,EAAE,KAAK;SACjB,CAAC,CAAC;QACH,MAAM,YAAY,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,YAAY,CAAC,IAAI,CAAC,MAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE;YAC9G,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;QACH,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;IACvC,CAAC;IACD,KAAK,CAAC,iBAAiB,CAAC,KAAa;QACnC,IAAI,CAAC;YACH,IAAI,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,YAAY,CAAC,IAAI,CAAC,MAAO,CAAC,GAAG,CAAC,gBAAgB,CAAe,CAAC;YAClG,OAAO,WAAW,CAAC;QACrB,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,QAAQ,CAAC,YAAY,CAAC,wBAAwB,CAAC,CAAC;QACxD,CAAC;IACH,CAAC;IACD,KAAK,CAAC,gBAAgB,CAAC,KAAa;QAClC,IAAI,CAAC;YACH,IAAI,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,YAAY,CAAC,IAAI,CAAC,MAAO,CAAC,GAAG,CAAC,eAAe,CAAe,CAAC;YACjG,OAAO,WAAW,CAAC;QACrB,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,QAAQ,CAAC,YAAY,CAAC,wBAAwB,CAAC,CAAC;QACxD,CAAC;IACH,CAAC;CACF;AAED,eAAe,IAAI,YAAY,EAAE,CAAC","sourcesContent":["import JWT from \"jsonwebtoken\";\r\nimport configLoader from \"../../module/configLoader/index.js\";\r\nimport errorApi from \"./errorService.js\";\r\nimport { JWTPayload } from \"../../model/jwtModel.js\";\r\n\r\nclass TokenService {\r\n  async createdToken(userId: number, login: string) {\r\n    const accessToken = JWT.sign({ userId: userId, login: login }, configLoader.main.config!.JWT.accessSecretKey, {\r\n      expiresIn: \"15m\",\r\n    });\r\n    const refreshToken = JWT.sign({ userId: userId, login: login }, configLoader.main.config!.JWT.refreshSecretKey, {\r\n      expiresIn: \"2d\",\r\n    });\r\n    return { accessToken, refreshToken };\r\n  }\r\n  async validRefreshToken(token: string): Promise<JWTPayload> {\r\n    try {\r\n      let verifyToken = JWT.verify(token, configLoader.main.config!.JWT.refreshSecretKey) as JWTPayload;\r\n      return verifyToken;\r\n    } catch (err) {\r\n      throw errorApi.unauthorized(\"Токен недействительный\");\r\n    }\r\n  }\r\n  async validaccessToken(token: string): Promise<JWTPayload> {\r\n    try {\r\n      let verifyToken = JWT.verify(token, configLoader.main.config!.JWT.accessSecretKey) as JWTPayload;\r\n      return verifyToken;\r\n    } catch (err) {\r\n      throw errorApi.unauthorized(\"Токен недействительный\");\r\n    }\r\n  }\r\n}\r\n\r\nexport default new TokenService();\r\n"]}