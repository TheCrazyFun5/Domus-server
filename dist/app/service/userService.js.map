{"version":3,"file":"userService.js","sourceRoot":"","sources":["../../../src/app/service/userService.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,qCAAqC,CAAC;AAE3D,OAAO,QAAQ,MAAM,mBAAmB,CAAC;AACzC,OAAO,MAAM,MAAM,UAAU,CAAC;AAC9B,OAAO,YAAY,MAAM,mBAAmB,CAAC;AAE7C,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AAC5C,MAAM,WAAW;IACf,KAAK,CAAC,YAAY,CAAC,KAAa,EAAE,IAAY,EAAE,IAAI,GAAG,MAAM,EAAE,OAAsB,IAAI;QACvF,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;QAC9D,IAAI,KAAK;YAAE,MAAM,QAAQ,CAAC,UAAU,CAAC,0BAA0B,KAAK,aAAa,CAAC,CAAC;QACnF,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QACrD,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;QACnF,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,KAAa,EAAE,IAAY;QACrC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;QAC7D,IAAI,IAAI,EAAE,CAAC;YACT,IAAI,MAAM,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC1C,OAAO,MAAM,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAC9D,CAAC;QACH,CAAC;QACD,MAAM,QAAQ,CAAC,UAAU,CAAC,2BAA2B,CAAC,CAAC;IACzD,CAAC;IACD,KAAK,CAAC,iBAAiB,CAAC,YAAoB;QAC1C,MAAM,OAAO,GAAG,MAAM,YAAY,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QACnE,OAAO,MAAM,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;IACxE,CAAC;CACF;AACD,eAAe,IAAI,WAAW,EAAE,CAAC","sourcesContent":["import { User } from \"../../module/BD/model/user.model.js\";\r\nimport logger from \"../../module/logger/index.js\";\r\nimport errorApi from \"./errorService.js\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport tokenService from \"./tokenService.js\";\r\n\r\nconst saltbcrypt = await bcrypt.genSalt(10);\r\nclass userService {\r\n  async registration(login: string, pass: string, role = \"user\", mail: string | null = null) {\r\n    const check = await User.findOne({ where: { login: login } });\r\n    if (check) throw errorApi.badRequest(`Пользователь с логином ${login} существует`);\r\n    const hashPass = await bcrypt.hash(pass, saltbcrypt);\r\n    const user = User.create({ login: login, pass: hashPass, role: role, mail: mail });\r\n    return user;\r\n  }\r\n\r\n  async login(login: string, pass: string) {\r\n    const user = await User.findOne({ where: { login: login } });\r\n    if (user) {\r\n      if (await bcrypt.compare(pass, user.pass)) {\r\n        return await tokenService.createdToken(user.id, user.login);\r\n      }\r\n    }\r\n    throw errorApi.badRequest(\"Неверный логин или пароль\");\r\n  }\r\n  async updatAaccessToken(refreshToken: string) {\r\n    const Payload = await tokenService.validRefreshToken(refreshToken);\r\n    return await tokenService.createdToken(Payload.userId, Payload.login);\r\n  }\r\n}\r\nexport default new userService();\r\n"]}