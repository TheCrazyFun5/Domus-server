{"version":3,"file":"dbDto.js","sourceRoot":"","sources":["../../../src/installer/dto/dbDto.ts"],"names":[],"mappings":"AACA,OAAO,QAAQ,MAAM,mCAAmC,CAAC;AACzD,MAAM,OAAO,GAAa,CAAC,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;AAC9E,MAAM,OAAO,GACX,kKAAkK,CAAC;AAErK,MAAM,CAAC,OAAO,UAAU,KAAK,CAAC,IAAS;IACrC,IAAI,KAAK,GAAa,EAAE,CAAC;IAEzB,IAAI,CAAC,IAAI;QAAE,MAAM,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;IACnD,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;QAAE,KAAK,CAAC,IAAI,CAAC,wBAAwB,OAAO,EAAE,CAAC,CAAC;IAC5F,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,OAAO,IAAI,CAAC,EAAE,IAAI,QAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAAE,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAChG,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,CAAC,IAAI,IAAI,QAAQ,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,GAAG,KAAK;QACnF,KAAK,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;IACtD,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,OAAO,IAAI,CAAC,KAAK,IAAI,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC;QACvE,KAAK,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;IAChD,IAAI,OAAO,IAAI,CAAC,IAAI,IAAI,QAAQ;QAAE,KAAK,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;IAC3F,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,OAAO,IAAI,CAAC,MAAM,IAAI,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC;QAC1E,KAAK,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC;IAE5D,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC;QAAE,MAAM,QAAQ,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAChF,IAAI,GAAG,GAAW;QAChB,GAAG,EAAE,IAAI,CAAC,GAAG;QACb,EAAE,EAAE,IAAI,CAAC,EAAE;QACX,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,KAAK,EAAE,IAAI,CAAC,KAAK;QACjB,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,MAAM,EAAE,IAAI,CAAC,MAAM;KACpB,CAAC;IACF,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["import { dbData } from \"../../module/configLoader/modelConfig.js\";\r\nimport errorApi from \"../../app/service/errorService.js\";\r\nconst DMSname: string[] = [\"mysql\", \"postgres\", \"mariadb\", \"oracle\", \"mssql\"];\r\nconst ipRegex =\r\n  /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\r\n\r\nexport default function dbDto(data: any): dbData {\r\n  let error: string[] = [];\r\n\r\n  if (!data) throw errorApi.badRequest(\"Нет данных\");\r\n  if (!data.dms || !DMSname.includes(data.dms)) error.push(`DMS может равняться: ${DMSname}`);\r\n  if (!data.ip || typeof data.ip != \"string\" || !ipRegex.test(data.ip)) error.push(`Неверный IP`);\r\n  if (!data.port || typeof data.port != \"number\" || data.port <= 0 || data.port > 65535)\r\n    error.push(`Порт должен быть числом от 1 до 65534`);\r\n  if (!data.login || typeof data.login != \"string\" || data.login.length < 4)\r\n    error.push(\"Логин должен быть >= 4 символов\");\r\n  if (typeof data.pass != \"string\") error.push(\"Пароль должен быть стракой даже если он ''\");\r\n  if (!data.dbName || typeof data.dbName != \"string\" || data.dbName.length < 1)\r\n    error.push(\"Название таблицы должно иметь >= 1 символов\");\r\n\r\n  if (error && error.length > 0) throw errorApi.badRequest(`${error.join(\"\\n\")}`);\r\n  let dto: dbData = {\r\n    dms: data.dms,\r\n    ip: data.ip,\r\n    port: data.port,\r\n    login: data.login,\r\n    pass: data.pass,\r\n    dbName: data.dbName,\r\n  };\r\n  return dto;\r\n}\r\n"]}