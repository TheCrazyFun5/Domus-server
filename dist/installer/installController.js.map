{"version":3,"file":"installController.js","sourceRoot":"","sources":["../../src/installer/installController.ts"],"names":[],"mappings":"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","sourcesContent":["import configLoader from \"../module/configLoader/index.js\";\r\nimport logger from \"../module/logger/index.js\";\r\nimport { Request, Response } from \"express\";\r\nimport crypto from \"crypto\";\r\nimport dbDto from \"./dto/dbDto.js\";\r\nimport errorApi from \"../app/service/errorService.js\";\r\nimport { connection } from \"../module/BD/index.js\";\r\nimport userService from \"../app/service/userService.js\";\r\n\r\nclass InstallController {\r\n  callBack: () => void;\r\n  constructor(callBack: () => void) {\r\n    this.callBack = callBack;\r\n  }\r\n  async Setup(req: Request, res: Response) {\r\n    try {\r\n      let data = req.body;\r\n      if (!data) return res.status(200).json({ success: false, text: \"нет данных\" });\r\n      await configLoader.main.UpConfig(req.body);\r\n      res.status(200).json({ success: true });\r\n      this.callBack();\r\n    } catch (err) {\r\n      logger.app.error(err);\r\n      res.json({ success: false });\r\n    }\r\n  }\r\n  async Save(req: Request, res: Response) {\r\n    try {\r\n      let data = req.body;\r\n      if (!data) return res.status(400).json({ success: false, text: \"нет данных\" });\r\n      userService.registration(data.admin.login, data.admin.pass, \"admin\", data.admin.mail);\r\n      const token = {\r\n        accessSecretKey: crypto.randomBytes(64).toString(\"hex\"),\r\n        refreshSecretKey: crypto.randomBytes(64).toString(\"hex\"),\r\n      };\r\n      data.JWT = token;\r\n      if (data.MQTT.builtIn) data.MQTT = { builtIn: true, ip: \"0.0.0.0\", port: 3350, login: \"App\", pass: \"159159\" };\r\n      await configLoader.main.UpConfig({ Server: data.Server, BD: data.BD, MQTT: data.MQTT, JWT: data.JWT });\r\n      res.status(200).json(\"\");\r\n      this.callBack();\r\n    } catch (err) {\r\n      err instanceof errorApi\r\n        ? res.status(err.status).json(err.message)\r\n        : res.status(500).json(\"Мой код решил, что сегодня выходной.\");\r\n      logger.app.error(err, \"Installer\");\r\n    }\r\n  }\r\n  async generatorJWT(req: Request, res: Response) {\r\n    try {\r\n      const token = {\r\n        accessSecretKey: crypto.randomBytes(64).toString(\"hex\"),\r\n        refreshSecretKey: crypto.randomBytes(64).toString(\"hex\"),\r\n      };\r\n      res.status(200).json(token);\r\n    } catch (err) {\r\n      logger.app.error(err);\r\n    }\r\n  }\r\n\r\n  async dbConnect(req: Request, res: Response) {\r\n    try {\r\n      const data = req.body;\r\n      let dbData = dbDto(data);\r\n      const connect = await connection(dbData);\r\n      if (connect) return res.status(400).json(connect);\r\n      res.status(200).json(\"\");\r\n    } catch (err) {\r\n      err instanceof errorApi\r\n        ? res.status(err.status).json(err.message)\r\n        : res.status(500).json(\"Мой код решил, что сегодня выходной.\");\r\n      logger.app.error(err, \"Installer\");\r\n    }\r\n  }\r\n}\r\n\r\nexport default InstallController;\r\n"]}