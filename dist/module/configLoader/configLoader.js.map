{"version":3,"file":"configLoader.js","sourceRoot":"","sources":["../../../src/module/configLoader/configLoader.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,YAAY,EAAE,aAAa,EAAE,MAAM,IAAI,CAAC;AACxE,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,MAAM,MAAM,oBAAoB,CAAC;AAGxC,MAAM,YAAY;IAChB,UAAU,CAAS;IACnB,MAAM,CAAK;IAEX,YAAY,UAAkB,EAAE,UAAkB;QAChD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;QACpD,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IACM,MAAM;QACX,IAAI,CAAC;YACH,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;YAC5C,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,MAAM,CAAC;YACP,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IACD,SAAS;QACP,IAAI,CAAC;YACH,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC;gBAClB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC;YACnE,CAAC;QACH,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,sBAAsB,IAAI,CAAC,UAAU,OAAO,GAAG,EAAE,EAAE,cAAc,CAAC,CAAC;QACtF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,MAAS;QACtB,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,aAAa,IAAI,CAAC,UAAU,EAAE,EAAE,cAAc,CAAC,CAAC;QAC/D,IAAI,CAAC;YACH,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;YACzE,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;YAChD,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,0CAA0C,GAAG,EAAE,EAAE,cAAc,CAAC,CAAC;YAClF,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;CACF;AAED,OAAO,EAAE,YAAY,EAAE,CAAC","sourcesContent":["import { accessSync, constants, readFileSync, writeFileSync } from \"fs\";\r\nimport path from \"path\";\r\nimport logger from \"../logger/index.js\";\r\nimport { fileURLToPath } from \"url\";\r\n\r\nclass configLoader<T> {\r\n  pathConfig: string;\r\n  config?: T;\r\n\r\n  constructor(pathConfig: string, nameConfig: string) {\r\n    this.pathConfig = path.join(pathConfig, nameConfig);\r\n    this.getConfig();\r\n  }\r\n  public exists(): boolean {\r\n    try {\r\n      accessSync(this.pathConfig, constants.F_OK);\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n  getConfig(): void {\r\n    try {\r\n      if (this.exists()) {\r\n        this.config = JSON.parse(readFileSync(this.pathConfig, \"utf-8\"));\r\n      }\r\n    } catch (err) {\r\n      logger.app.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: ${this.pathConfig} -> ${err}`, \"ConfigLoader\");\r\n    }\r\n  }\r\n\r\n  async UpConfig(config: T): Promise<boolean> {\r\n    logger.app.log(`üõ† –°–æ–∑–¥–∞—é ${this.pathConfig}`, \"ConfigLoader\");\r\n    try {\r\n      writeFileSync(this.pathConfig, JSON.stringify(config, null, 2), \"utf-8\");\r\n      logger.app.log(\"‚úÖ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω\", \"ConfigLoader\");\r\n      this.getConfig();\r\n      return true;\r\n    } catch (err) {\r\n      logger.app.error(`‚ùå –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${err}`, \"ConfigLoader\");\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport { configLoader };\r\n"]}