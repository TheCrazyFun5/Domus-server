{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/module/BD/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AACtC,OAAO,MAAM,MAAM,oBAAoB,CAAC;AACxC,OAAO,YAAY,MAAM,0BAA0B,CAAC;AACpD,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,EAAE,aAAa,EAAE,MAAM,KAAK,CAAC;AAGpC,IAAI,SAAS,GAAqB,IAAI,CAAC;AACvC,KAAK,UAAU,eAAe,CAAC,MAAe;IAC5C,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,MAAO,CAAC,EAAE,CAAC;IAC9D,OAAO,IAAI,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,EAAE;QAC7D,IAAI,EAAE,MAAM,CAAC,EAAE;QACf,IAAI,EAAE,MAAM,CAAC,IAAI;QACjB,OAAO,EAAE,OAAO;QAChB,OAAO,EAAE,KAAK;KACf,CAAC,CAAC;AACL,CAAC;AAED,KAAK,UAAU,IAAI,CAAC,CAAY;IAC9B,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC1D,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;QAC3D,KAAK,MAAM,IAAI,IAAI,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;YACjH,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YACzE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,UAAU,IAAI,mBAAmB,CAAC,CAAC;QACnD,CAAC;IACH,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,+CAA+C,GAAG,EAAE,CAAC,CAAC;IACxE,CAAC;AACH,CAAC;AAED,KAAK,UAAU,UAAU,CAAC,MAAe;IACvC,IAAI,CAAC;QACH,IAAI,SAAS;YAAE,SAAS,CAAC,KAAK,EAAE,CAAC;QACjC,SAAS,GAAG,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;QAC1C,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC;QACtB,MAAM,SAAS,CAAC,YAAY,EAAE,CAAC;QAC/B,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,2DAA2D,CAAC,CAAC;QAC3E,MAAM,SAAS,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACtC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAC;IACjE,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,uBAAuB,KAAK,EAAE,CAAC,CAAC;QAChD,OAAO,EAAE,KAAK,EAAE,CAAC;IACnB,CAAC;AACH,CAAC;AAED,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC","sourcesContent":["import { Sequelize } from \"sequelize\";\r\nimport logger from \"../logger/index.js\";\r\nimport configLoader from \"../configLoader/index.js\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { pathToFileURL } from \"url\";\r\nimport { dbData } from \"../../module/configLoader/modelConfig.js\";\r\n\r\nlet sequelize: Sequelize | null = null;\r\nasync function CreateSequelize(dbData?: dbData) {\r\n  const dataDB = dbData ? dbData : configLoader.main.config!.BD;\r\n  return new Sequelize(dataDB.dbName, dataDB.login, dataDB.pass, {\r\n    host: dataDB.ip,\r\n    port: dataDB.port,\r\n    dialect: \"mysql\",\r\n    logging: false,\r\n  });\r\n}\r\n\r\nasync function init(s: Sequelize): Promise<void> {\r\n  try {\r\n    const dirModel = path.join(import.meta.dirname, \"/model\");\r\n    logger.bd.log(\"Начало инициализации моделей базы данных.\");\r\n    for (const file of fs.readdirSync(dirModel).filter((file) => file.includes(\".model.\") && !file.includes(\".map\"))) {\r\n      const test = await import(pathToFileURL(path.join(dirModel, file)).href);\r\n      test.init(s);\r\n      logger.bd.log(`Модель ${file} инициализирована`);\r\n    }\r\n  } catch (err) {\r\n    logger.bd.error(`Ошибка при инициализации моделей баз данны: ${err}`);\r\n  }\r\n}\r\n\r\nasync function connection(dbData?: dbData): Promise<void | {}> {\r\n  try {\r\n    if (sequelize) sequelize.close();\r\n    sequelize = await CreateSequelize(dbData);\r\n    await init(sequelize);\r\n    await sequelize.authenticate();\r\n    logger.bd.log(\"Успешное подключение к БД, начинаю синхронизацию моделей.\");\r\n    await sequelize.sync({ alter: true });\r\n    logger.bd.log(`Процесс синхронизации моделей прошёл успешно.`);\r\n  } catch (error) {\r\n    logger.bd.error(`Ошибка подключения: ${error}`);\r\n    return { error };\r\n  }\r\n}\r\n\r\nexport { sequelize, connection };\r\n"]}